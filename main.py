import os
import telebot
from flask import Flask, request
import openai

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
TOKEN = os.getenv("TELEGRAM_API_TOKEN")
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)
openai.api_key = os.getenv("OPENAI_API_KEY")
client = openai.OpenAI()

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start_command(message):
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤—ñ—Ç! –Ø Woofer Bot ‚Äî TikTok SMM –ø–æ–º—ñ—á–Ω–∏–∫ üê∂\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
        "/help /ping /report /today"
    )

# –ö–æ–º–∞–Ω–¥–∞ /help
@bot.message_handler(commands=['help'])
def help_command(message):
    bot.send_message(
        message.chat.id,
        "/start /help /ping /report /today ‚Äî –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —â–æ—Å—å, —ñ —è –≤—ñ–¥–ø–æ–≤—ñ–º!"
    )

# –ö–æ–º–∞–Ω–¥–∞ /ping
@bot.message_handler(commands=['ping'])
def ping_command(message):
    bot.send_message(message.chat.id, "Pong üèì")

# –ö–æ–º–∞–Ω–¥–∞ /today
@bot.message_handler(commands=['today'])
def today_command(message):
    bot.send_message(
        message.chat.id,
        "–°—å–æ–≥–æ–¥–Ω—ñ –±—É–¥–µ –Ω–æ–≤–∏–π –≤—ñ–¥–µ–æ-—Ä–µ—Ü–µ–ø—Ç –¥–ª—è TikTok –∑ –ø–µ—Å–∏–∫–∞–º–∏-–∫—É—Ö–∞—Ä—è–º–∏! üçîüêæ"
    )

# –ö–æ–º–∞–Ω–¥–∞ /report –∑ OpenAI GPT-4
@bot.message_handler(commands=['report'])
def report_command(message):
    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢–∏ SMM-–º–µ–Ω–µ–¥–∂–µ—Ä TikTok."},
                {"role": "user", "content": "–ó—Ä–æ–±–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –∑–≤—ñ—Ç –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–π TikTok –∫–æ–Ω—Ç–µ–Ω—Ç –∑ –ø–µ—Å–∏–∫–∞–º–∏-–∫—É—Ö–∞—Ä—è–º–∏."}
            ],
            temperature=0.7
        )
        result = response.choices[0].message.content
        bot.send_message(message.chat.id, result)
    except Exception as e:
        print("GPT –ø–æ–º–∏–ª–∫–∞:", e)
        bot.send_message(message.chat.id, "GPT –ø–æ–º–∏–ª–∫–∞ üò¢")

# –û–±—Ä–æ–±–∫–∞ —ñ–Ω—à–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@bot.message_handler(func=lambda message: True)
def default_response(message):
    bot.send_message(message.chat.id, "–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É –∞–±–æ —Å–∫–∞–∂–∏ —â–æ—Å—å!")

# Flask –º–∞—Ä—à—Ä—É—Ç –¥–ª—è Webhook
@app.route('/', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return '', 200
    else:
        return 'Invalid content type', 403

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 10000)))
@bot.message_handler(commands=['report'])
def report_command(message):
    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢–∏ SMM-–º–µ–Ω–µ–¥–∂–µ—Ä TikTok."},
                {"role": "user", "content": "–ó—Ä–æ–±–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –∑–≤—ñ—Ç –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–π TikTok –∫–æ–Ω—Ç–µ–Ω—Ç –∑ –ø–µ—Å–∏–∫–∞–º–∏-–∫—É—Ö–∞—Ä—è–º–∏."}
            ],
            temperature=0.7
        )
        result = response.choices[0].message.content.strip()
        bot.send_message(message.chat.id, result)
    except Exception as e:
        bot.send_message(message.chat.id, f"GPT –ø–æ–º–∏–ª–∫–∞ üò¢\n{e}")

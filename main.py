import os
import telebot
from flask import Flask, request
import openai
import traceback
import requests
import time
from openai import OpenAI

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–æ–∫–µ–Ω—ñ–≤
TELEGRAM_TOKEN = os.getenv("TELEGRAM_API_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not TELEGRAM_TOKEN or not OPENAI_API_KEY:
    raise ValueError("‚ùå TELEGRAM_API_TOKEN –∞–±–æ OPENAI_API_KEY –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")

client = openai.OpenAI(api_key=OPENAI_API_KEY)
bot = telebot.TeleBot(TELEGRAM_TOKEN, threaded=False)
app = Flask(__name__)

# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
def set_webhook():
    webhook_url = "https://woofer-bot.onrender.com/"
    res = requests.post(
        f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/setWebhook",
        json={"url": webhook_url}
    )
    print(f"üîó Webhook status: {res.status_code} ‚Äî {res.text}")

set_webhook()

# üì¶ –ö–æ–º–∞–Ω–¥–∏
@bot.message_handler(commands=['start'])
def start_command(message):
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤—ñ—Ç! –Ø Woofer Bot ‚Äî TikTok SMM –ø–æ–º—ñ—á–Ω–∏–∫ üê∂\n\n–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n/help /ping /report /today"
    )

@bot.message_handler(commands=['help'])
def help_command(message):
    bot.send_message(message.chat.id, "/start /help /ping /report /today ‚Äî –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —â–æ—Å—å, —ñ —è –≤—ñ–¥–ø–æ–≤—ñ–º!")

@bot.message_handler(commands=['ping'])
def ping_command(message):
    bot.send_message(message.chat.id, "Pong üèì")

@bot.message_handler(commands=['today'])
def today_command(message):
    bot.send_message(message.chat.id, "–°—å–æ–≥–æ–¥–Ω—ñ –±—É–¥–µ –Ω–æ–≤–∏–π –≤—ñ–¥–µ–æ-—Ä–µ—Ü–µ–ø—Ç –¥–ª—è TikTok –∑ –ø–µ—Å–∏–∫–∞–º–∏-–∫—É—Ö–∞—Ä—è–º–∏! üçîüêæ")

@bot.message_handler(commands=['report'])
def report_command(message):
    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢–∏ SMM-–º–µ–Ω–µ–¥–∂–µ—Ä TikTok."},
                {"role": "user", "content": "–ó—Ä–æ–±–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –∑–≤—ñ—Ç –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–π TikTok –∫–æ–Ω—Ç–µ–Ω—Ç –∑ –ø–µ—Å–∏–∫–∞–º–∏-–∫—É—Ö–∞—Ä—è–º–∏."}
            ],
            temperature=0.7
        )
        result = response.choices[0].message.content.strip()
        bot.send_message(message.chat.id, result)
    except Exception as e:
        print("GPT –ø–æ–º–∏–ª–∫–∞:", e)
        bot.send_message(message.chat.id, "GPT –ø–æ–º–∏–ª–∫–∞ üò¢")

# GPT-—á–∞—Ç –Ω–∞ –≤—Å—ñ —ñ–Ω—à—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
@bot.message_handler(commands=['report'])
def report_command(message):
    try:
        thread = client.beta.threads.create()
        client.beta.threads.messages.create(
            thread_id=thread.id,
            role="user",
            content="–ó—Ä–æ–±–∏ –∫–æ—Ä–æ—Ç–∫–∏–π TikTok-–∑–≤—ñ—Ç —É —Å—Ç–∏–ª—ñ –ø–µ—Å–∏–∫–∞"
        )
        run = client.beta.threads.runs.create(
            thread_id=thread.id,
            assistant_id="asst_SUNoeRmHMlwxXwIRNZYAjo43"
        )

        # –û—á—ñ–∫—É—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        while True:
            status = client.beta.threads.runs.retrieve(thread_id=thread.id, run_id=run.id)
            if status.status == "completed":
                break
            elif status.status == "failed":
                raise Exception("–ê—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ –∑–º—ñ–≥ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.")
            time.sleep(1)

        # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        messages = client.beta.threads.messages.list(thread_id=thread.id)
        reply = messages.data[0].content[0].text.value
        bot.send_message(message.chat.id, reply)

    except Exception as e:
        print("‚ùå GPT –ø–æ–º–∏–ª–∫–∞:", e)
        traceback.print_exc()
        bot.send_message(message.chat.id, "GPT –ø–æ–º–∏–ª–∫–∞ üò¢")

# Webhook POST
@app.route('/', methods=['POST'])
def webhook():
    json_string = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_string)
    bot.process_new_updates([update])
    return "OK", 200

# Render Healthcheck
@app.route('/', methods=['GET'])
def index():
    return "üêæ Woofer SMM –±–æ—Ç –ø—Ä–∞—Ü—é—î!"

# –õ–æ–∫–∞–ª—å–Ω–∏–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    print("üöÄ Woofer Bot –∑–∞–ø—É—â–µ–Ω–æ. –û—á—ñ–∫—É—î–º–æ –∑–∞–ø–∏—Ç–∏ Telegram...")
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))

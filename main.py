from flask import Flask, request
import telebot
import openai
import os
import logging

# üîê –ë–µ–∑–ø–µ—á–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –∫–ª—é—á—ñ–≤
TELEGRAM_API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

bot = telebot.TeleBot(TELEGRAM_API_TOKEN)
openai.api_key = OPENAI_API_KEY
app = Flask(__name__)

# ‚è± –¢–∞–π–º–∞—É—Ç–∏
telebot.apihelper.READ_TIMEOUT = 5
telebot.apihelper.CONNECT_TIMEOUT = 3

# üßæ –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

@app.route("/", methods=["GET", "POST"])
def webhook():
    if request.method == "POST":
        update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
        bot.process_new_updates([update])
        return "ok", 200
    return "‚úÖ Woofer bot is live", 200

# üü¢ /start
@bot.message_handler(commands=["start"])
def start_handler(message):
    bot.send_message(message.chat.id, "üê∂ –ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî Woofer SMM Bot. –ì–æ—Ç–æ–≤–∏–π –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –Ω–∞–¥ TikTok üé¨")

# üß† /help
@bot.message_handler(commands=["help"])
def help_handler(message):
    bot.send_message(message.chat.id,
                     "üõ† –ö–æ–º–∞–Ω–¥–∏:\n"
                     "/start ‚Äî –∑–∞–ø—É—Å–∫\n"
                     "/help ‚Äî –¥–æ–ø–æ–º–æ–≥–∞\n"
                     "/ping ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞\n"
                     "/report ‚Äî —ñ–¥–µ—è –¥–ª—è TikTok\n"
                     "–ù–∞–ø–∏—à–∏ –±—É–¥—å-—â–æ ‚Äî —è –≤—ñ–¥–ø–æ–≤—ñ–º —è–∫ GPT üß†")

# üõ∞ /ping
@bot.message_handler(commands=["ping"])
def ping_handler(message):
    bot.send_message(message.chat.id, "üèì pong")

# üß™ /report
@bot.message_handler(commands=["report"])
def report_handler(message):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{
                "role": "user",
                "content": "–ü—Ä–∏–¥—É–º–∞–π –∞–±—Å—É—Ä–¥–Ω—É —ñ–¥–µ—é –¥–ª—è TikTok –∑ —Å–æ–±–∞–∫–∞–º–∏-–∫—É—Ö–∞—Ä—è–º–∏"
            }],
            timeout=10
        )
        reply = response.choices[0].message.content.strip()
        bot.send_message(message.chat.id, f"üî• –Ü–¥–µ—è –¥–ª—è TikTok:\n{reply}")
    except Exception as e:
        logging.error(f"GPT error: {e}")
        bot.send_message(message.chat.id, "üö´ –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —ñ–¥–µ—ó. GPT –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–≤.")

# üí¨ –í—ñ–¥–ø–æ–≤—ñ–¥—å GPT –Ω–∞ –±—É–¥—å-—è–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
@bot.message_handler(func=lambda message: True)
def gpt_chat_handler(message):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{
                "role": "user",
                "content": message.text
            }],
            timeout=10
        )
        reply = response.choices[0].message.content.strip()
        bot.send_message(message.chat.id, reply)
    except Exception as e:
        logging.error(f"GPT error: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.")
